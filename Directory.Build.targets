<Project>

  <PropertyGroup>
    <UnityVersion>2019.4.21f1</UnityVersion>
  </PropertyGroup>

    <!-- Unity paths on Windows -->
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('Windows'))">
    <UnityRoot Condition="Exists('C:\Program Files\Unity\Hub\Editor\$(UnityVersion)\Editor\Data\Managed\UnityEngine.dll')">C:\Program Files\Unity\Hub\Editor\$(UnityVersion)\Editor</UnityRoot>
    <!--If not using Unity Hub, tries to pick whatever Unity version is installed on the machine-->
    <UnityRoot Condition="$(UnityRoot) == '' AND Exists('C:\Program Files\Unity\Editor\Data\Managed\UnityEngine.dll')">C:\Program Files\Unity\Editor</UnityRoot>
    <UnityManagedPath>$(UnityRoot)\Data\Managed</UnityManagedPath>
    <UnityExec>$(UnityRoot)\Unity.exe</UnityExec>
    <StandalonePlayerName>buildWindows64Player</StandalonePlayerName>
    <ArtifactName>game.exe</ArtifactName>
  </PropertyGroup>

    <!-- Unity paths on macOS -->
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('OSX'))">
    <UnityRoot Condition="Exists('/Applications/Unity/Hub/Editor/$(UnityVersion)/Unity.app/Contents/Managed/UnityEngine.dll')">/Applications/Unity/Hub/Editor/$(UnityVersion)/Unity.app/</UnityRoot>
    <!--If not using Unity Hub, tries to pick whatever Unity version is installed on the machine-->
    <UnityRoot Condition="$(UnityRoot) == '' AND Exists('/Applications/Unity/Unity.app/Contents/Managed/UnityEngine.dll')">/Applications/Unity/Unity.app/</UnityRoot>
    <UnityManagedPath>$(UnityRoot)/Contents/Managed</UnityManagedPath>
    <UnityExec>$(UnityRoot)/Contents/MacOS/Unity</UnityExec>
    <StandalonePlayerName>buildMacOS64Player</StandalonePlayerName>
    <ArtifactName>game</ArtifactName>
  </PropertyGroup>

  <PropertyGroup>
    <UnitySampleProjectPath>$(MSBuildProjectDirectory)/../../samples/unity-of-bugs</UnitySampleProjectPath>
    <UnityTestPlayModeResultFilePath>../../artifacts/test/playmode/results.xml</UnityTestPlayModeResultFilePath>
    <UnityTestEditModeResultFilePath>../../artifacts/test/editmode/results.xml</UnityTestEditModeResultFilePath>
  </PropertyGroup>

  <Target Name="CleanUnityTestResults" AfterTargets="Clean">
    <Delete Files="$(UnityTestPlayModeResultFilePath)" />
    <Delete Files="$(UnityTestEditModeResultFilePath)" />
  </Target>

  <!-- Even with a successful build, Unity will error on 'usbmuxd' or log out to std-error which breaks msbuild.
We need to run a unity build to restore the test packages and for that reason we'll ignore errors here and assume a later step will validate the build is actually working:
  The offending error:
  [usbmuxd] Stop listen thread
  [usbmuxd] Error:
  [usbmuxd] Listen thread exitingit -batchmode -nographics -logFile - -projectPath $(UnitySampleProjectPath) -$(StandalonePlayerName) $(ArtifactName)
For that reason, Exec tasks to unity all ignore error. That means that subsequent tasks must exist to validate the command (i.e: parse logs, etc).
Related: https://forum.unity.com/threads/6572-debugger-agent-unable-to-listen-on-27.500387/  -->

  <!-- Build a IL2CPP player -->
  <Target Name="UnityBuildPlayerIL2CPP"
          DependsOnTargets="Build"
          Condition="'$(MSBuildProjectName)' == 'Sentry.Unity.Tests'">
    <Error Condition="$(UnityRoot) == ''" Text="Couldn't find Unity."></Error>

    <Message Importance="High" Text="Building Player with IL2CPP."></Message>

    <Exec Command="&quot;$(UnityExec)&quot; -quit -batchmode -nographics -logFile - -projectPath $(UnitySampleProjectPath) -$(StandalonePlayerName) $(ArtifactName) "
          IgnoreStandardErrorWarningFormat="true"
          IgnoreExitCode="true"></Exec>
  </Target>

  <!-- If Unity Libraries don't exist, run a Unity build -->
  <Target Name="UnityRestorePackages"
    Condition="!Exists('$(UnitySampleProjectPath)/Library/ScriptAssemblies/UnityEngine.TestRunner.dll')"
    BeforeTargets="BeforeBuild">
    <Error Condition="$(UnityRoot) == ''" Text="Couldn't find Unity."></Error>

    <Exec Command="&quot;$(UnityExec)&quot; -quit -batchmode -nographics -logFile - -projectPath $(UnitySampleProjectPath) "
      IgnoreStandardErrorWarningFormat="true"
      IgnoreExitCode="true"></Exec>
  </Target>

  <!-- Run PlayMode tests with dotnet msbuild /t:UnityPlayModeTest -->
  <Target Name="UnityPlayModeTest"
          DependsOnTargets="Build"
          Condition="'$(MSBuildProjectName)' == 'Sentry.Unity.Tests'">
    <Error Condition="$(UnityRoot) == ''" Text="Couldn't find Unity."></Error>

    <Message Importance="High" Text="Running Unity PlayMode tests."></Message>
    <Exec Command="&quot;$(UnityExec)&quot; -batchmode -nographics -logFile - -runTests -testPlatform PlayMode -projectPath $(UnitySampleProjectPath) -testResults $(UnityTestPlayModeResultFilePath)	"
          IgnoreStandardErrorWarningFormat="true"
          IgnoreExitCode="true"></Exec>

    <UnityTestResults Path="$(UnityTestPlayModeResultFilePath)" />
  </Target>

  <!-- Run EditMode tests with dotnet msbuild /t:UnityPlayModeTest. -->
  <Target Name="UnityEditModeTest"
          DependsOnTargets="Build"
          Condition="'$(MSBuildProjectName)' == 'Sentry.Unity.Editor.Tests'">
    <Error Condition="$(UnityRoot) == ''" Text="Couldn't find Unity."></Error>

    <Message Importance="High" Text="Running Unity EditMode tests."></Message>

    <Exec Command="&quot;$(UnityExec)&quot; -batchmode -nographics -logFile - -runTests -testPlatform EditMode -projectPath $(UnitySampleProjectPath) -testResults $(UnityTestEditModeResultFilePath)	"
          IgnoreStandardErrorWarningFormat="true"
          IgnoreExitCode="true"></Exec>

    <UnityTestResults Path="$(UnityTestEditModeResultFilePath)" />
  </Target>

    <!-- Parse test results -->
  <UsingTask
    TaskName="UnityTestResults"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Path ParameterType="System.String" Required="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Xml.Linq" />
      <Code Type="Fragment" Language="cs">
<![CDATA[

if (!File.Exists(Path))
{
    Log.LogError("Test results file not found at " + Path);
    return false;
}

var document = XDocument.Load(Path);
var testRun = document.Descendants("test-run").First();

var total = testRun.Attribute("total").Value;
if (total == "0")
{
    Log.LogError("Unity test results is empty.");
    return false;
}

var result = testRun.Attribute("result").Value;
var failed = testRun.Attribute("failed").Value;
var message = $@"Result: {result.Replace("(Child)", "")} in {testRun.Attribute("duration").Value}s

-- Passed: {testRun.Attribute("passed").Value}
-- Failed: {failed}
-- Inconclusive: {testRun.Attribute("inconclusive").Value}
-- Skipped: {testRun.Attribute("skipped").Value}";

Log.LogMessage(message);

if (result == "Passed")
{
    return true;
}

var errorMessage = $"Test run completed with {failed} failing test{(int.Parse(failed) > 0 ? "s" : "")}.";
Log.LogError(errorMessage);

PrintFailedTests(testRun);

Success = false;

void PrintFailedTests(XElement element)
{
    foreach (var descendant in element.Descendants())
    {
        if (descendant.Name != "test-case"
            || descendant.Attribute("result")?.Value != "Failed")
        {
            continue;
        }

        if (descendant.Descendants().Any(d => d.Name == "test-case"))
        {
            PrintFailedTests(descendant);
        }
        else
        {
            var sb = new StringBuilder();
            var failure = descendant.Descendants("failure")
                .Descendants("message")
                .FirstOrDefault()
                ?.Value;

            sb.AppendLine(failure);

            var lines = descendant.Attribute("name")?.Value.Split(new[] { "\\n" }, StringSplitOptions.None);
            if (lines is null)
            {
                Log.LogError(sb.ToString());
                continue;
            }

            for (int i = 0; i < lines.Length; i++)
            {
                if (i == 0)
                {
                    sb.AppendLine();
                    Console.WriteLine();
                }
                else
                {
                    sb.Append('\t');
                }

                sb.AppendLine(lines[i].Replace("\\r", ""));
            }
            Log.LogError(sb.ToString());
        }
    }
}
]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
