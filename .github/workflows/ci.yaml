name: CI

on: [push, pull_request]

env:
  UNITY_VERSION: 2020.2.6
  PROJECT_PATH: samples/unity-of-bugs

jobs:

  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          submodules: recursive

      # Unity is about 3gb in size and takes 20 minutes to download and install.
      # Caching still takes some time, but brings it down to about 5 minutes.
      # Note: if you change the installation step, remember to update the trailing
      # hash at the end of the cache key.
      - name: Restore cached Unity installation
        id: cache-unity
        uses: actions/cache@v2
        with:
          path: C:/Program Files/Unity
          key: ${{ env.UNITY_VERSION }}-bf30a

      - name: Install Unity
        run: |
          choco install unity --version ${{ env.UNITY_VERSION }} --yes --no-progress
          choco install unity-win-il2cpp --version ${{ env.UNITY_VERSION }} --yes --no-progress
        if: ${{ !steps.cache-unity.outputs.cache-hit }}

      # Need to write to $GITHUB_PATH to make the environment variable
      # available to other steps.
      - name: Add Unity on PATH
        run: |
          Write-Output "C:/Program Files/Unity/Editor" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # .NET SDK is needed to build sentry-unity package
      - name: Install .NET
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x

      # License activation sometimes fails due to a problem connecting
      # to Unity's licensing backend. Retry a few times if it fails.
      - name: Activate license
        run: |
          $isSuccessful = $False
          $attempts = 5

          while ($attempts -gt 0) {
            try {
              unity -quit -batchmode -nographics -logFile - -serial ${{ secrets.UNITY_SERIAL }} -username ${{ secrets.UNITY_EMAIL }} -password ${{ secrets.UNITY_PASSWORD }} | Out-Default

              $isSuccessful = $True
              break
            } catch {
              Start-Sleep -Seconds 10
            }

            $attempts--
          }

          if (-not $isSuccessful) {
            Write-Host "::error ::Failed to activate license after multiple attempts."
            exit 1
          }

      - name: Build project
        run: |
          unity -quit -batchmode -nographics -logFile - -projectPath ${{ env.PROJECT_PATH }} -buildWindows64Player artifacts/build/game.exe | Out-Default

      - name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Build output
          path: ${{ env.PROJECT_PATH }}/artifacts/build

      # The working directory must be set because the project uses
      # relative paths for certain things.
      # Also, we need to provide the path to Unity because
      # the test project references some of its assemblies.
      - name: Build package
        run: |
          dotnet nuget locals all --clear
          dotnet build "-p:UnityVersion=${{ env.UNITY_VERSION }}" "-p:UnityPath=C:/Program Files/Unity/Editor/Data/Managed"
        working-directory: src/

      # This command doesn't work with the `-quit` option, unlike all the other ones
      - name: Run tests
        run: |
          try {
            unity -batchmode -nographics -logFile - -silent-crashes -runTests -testPlatform StandaloneWindows64 -projectPath ${{ env.PROJECT_PATH }} -testResults artifacts/test/results.xml | Out-Default
          } catch {
            Write-Output "::warn ::Unity test runner returned a non-zero exit code."
          }

      - name: Upload test artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Test results
          path: ${{ env.PROJECT_PATH }}/artifacts/test

      # Running tests does not print anything useful to the console, nor does it fail
      # the build, so we need to parse the results to figure out how things went.
      - name: Parse test results
        run: |
          $testRun = Select-Xml -Path ${{ env.PROJECT_PATH }}/artifacts/test/results.xml -XPath "/test-run" | Select-Object -Last 1

          Write-Output "Test run completed in $($testRun.Node.duration)."
          Write-Output "-- Result: $($testRun.Node.result)"
          Write-Output "-- Total: $($testRun.Node.total)"
          Write-Output "-- Passed: $($testRun.Node.passed)"
          Write-Output "-- Failed: $($testRun.Node.failed)"
          Write-Output "-- Inconclusive: $($testRun.Node.inconclusive)"
          Write-Output "-- Skipped: $($testRun.Node.skipped)"

          if ($testRun.Node.failed -gt 0) {
            Write-Output "::error ::Test run completed with $($testRun.Node.failed) failing test(s)."
            exit 1
          }

      # Professional licenses are per-seat so we should always try to return them
      - name: Return license
        run: |
          unity -quit -batchmode -nographics -logFile - -returnlicense | Out-Default
        if: ${{ always() }}
