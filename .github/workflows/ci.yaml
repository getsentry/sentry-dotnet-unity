name: CI

on:
  push:
    branches:
      - main
      - release/*

  pull_request:
    paths:
    - 'src/**'
    - 'sample/**'

env:
  # Download links are sourced from here: https://unity3d.com/unity/whats-new/2019.4.21
  UNITY_DOWNLOAD_URL: https://download.unity3d.com/download_unity/b76dac84db26/Windows64EditorInstaller/UnitySetup64.exe
  UNITY_TARGET_DOWNLOAD_URL: https://download.unity3d.com/download_unity/b76dac84db26/TargetSupportInstaller/UnitySetup-Windows-IL2CPP-Support-for-Editor-2019.4.21f1.exe

jobs:

  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          submodules: recursive

      # Unity is about 3gb in size and takes 20 minutes to download and install.
      # Caching still takes some time, but brings it down to about 5 minutes.
      # Note: if you change the installation step, remember to update the value
      # at the end of the key.
      - name: Restore cached Unity installation
        id: cache-unity
        uses: actions/cache@v2
        with:
          path: C:/Program Files/Unity
          key: ${{ env.UNITY_DOWNLOAD_URL }}-${{ env.UNITY_TARGET_DOWNLOAD_URL }}

      - name: Install Unity
        run: |
          Invoke-RestMethod -Uri ${{ env.UNITY_DOWNLOAD_URL }} -OutFile unity_install.exe
          Invoke-RestMethod -Uri ${{ env.UNITY_TARGET_DOWNLOAD_URL }} -OutFile unity_target_install.exe

          ./unity_install.exe /S | Out-Default
          ./unity_target_install.exe /S | Out-Default
        if: ${{ !steps.cache-unity.outputs.cache-hit }}

      # Need to write to $GITHUB_PATH to make the environment variable
      # available to other steps.
      - name: Add Unity on PATH
        run: |
          Write-Output "C:/Program Files/Unity/Editor" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # .NET SDK is needed to build sentry-unity package
      - name: Install .NET
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x

      # License activation sometimes fails due to a problem connecting
      # to Unity's licensing backend. Retry a few times if it fails.
      - name: Activate Unity license
        id: activate-license
        run: |
          $attempts = 5

          while ($attempts -gt 0) {
            unity -quit -batchmode -nographics -logFile - -serial ${{ secrets.UNITY_SERIAL }} -username ${{ secrets.UNITY_EMAIL }} -password ${{ secrets.UNITY_PASSWORD }} | Out-Default

            if ($LASTEXITCODE -eq 0) {
              break
            }

            Write-Host "License activation failed. Retrying..."
            Start-Sleep -Seconds 15
            $attempts--
          }

          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error ::Failed to activate license after multiple attempts."
          }

      - name: Build project
        run: |
          unity -quit -batchmode -nographics -logFile - -projectPath samples/unity-of-bugs -buildWindows64Player ../../artifacts/build/game.exe | Out-Default

      - name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Build output
          path: artifacts/build

      # The working directory must be set because the project uses
      # relative paths for certain things.
      # Also, we need to provide the path to Unity because
      # the test project references some of its assemblies.
      - name: Build Sentry package
        run: |
          dotnet nuget locals all --clear
          dotnet build -c Release "-p:UnityPath=C:/Program Files/Unity/Editor/Data/Managed"
        working-directory: src/

      # Don't fail the build here, we have a more detailed step later that provides more info.
      # Note: this command doesn't work with the `-quit` option, unlike all the other ones.
      - name: Run Unity tests (playmode)
        run: |
          unity -batchmode -nographics -logFile - -runTests -testPlatform PlayMode -projectPath samples/unity-of-bugs -testResults ../../artifacts/test/playmode/results.xml | Out-Default
          $LASTEXITCODE = 0

      - name: Upload test artifacts (playmode)
        uses: actions/upload-artifact@v1
        with:
          name: Test results (playmode)
          path: artifacts/test/playmode

      # Running tests does not print anything useful to the console
      # so we need to parse the results to figure out how things went.
      - name: Parse test results (playmode)
        run: |
          $testRun = Select-Xml -Path artifacts/test/playmode/results.xml -XPath "/test-run" | Select-Object -Last 1

          Write-Output "Playmode test run completed in $($testRun.Node.duration) seconds."
          Write-Output "-- Result: $($testRun.Node.result)"
          Write-Output "-- Total: $($testRun.Node.total)"
          Write-Output "-- Passed: $($testRun.Node.passed)"
          Write-Output "-- Failed: $($testRun.Node.failed)"
          Write-Output "-- Inconclusive: $($testRun.Node.inconclusive)"
          Write-Output "-- Skipped: $($testRun.Node.skipped)"
          Write-Output ""

          if ($testRun.Node.failed -gt 0) {
            $failedTests = $testRun.Node."test-suite"

            foreach ($failedTest in $failedTests) {
                Write-Output $failedTest.Node."#text"
                Write-Output ""
            }

            Write-Output "::error ::Test run completed with $($testRun.Node.failed) failing test(s)."
            exit 1
          }

      - name: Run Unity tests (editmode)
        run: |
          unity -batchmode -nographics -logFile - -runTests -testPlatform EditMode -projectPath samples/unity-of-bugs -testResults ../../artifacts/test/editmode/results.xml | Out-Default
          $LASTEXITCODE = 0

      - name: Upload test artifacts (editmode)
        uses: actions/upload-artifact@v1
        with:
          name: Test results (editmode)
          path: artifacts/test/editmode

      - name: Parse test results (editmode)
        run: |
          $testRun = Select-Xml -Path artifacts/test/editmode/results.xml -XPath "/test-run" | Select-Object -Last 1

          Write-Output "Editmode test run completed in $($testRun.Node.duration) seconds."
          Write-Output "-- Result: $($testRun.Node.result)"
          Write-Output "-- Total: $($testRun.Node.total)"
          Write-Output "-- Passed: $($testRun.Node.passed)"
          Write-Output "-- Failed: $($testRun.Node.failed)"
          Write-Output "-- Inconclusive: $($testRun.Node.inconclusive)"
          Write-Output "-- Skipped: $($testRun.Node.skipped)"
          Write-Output ""

          if ($testRun.Node.failed -gt 0) {
            $failedTests = $testRun.Node."test-suite"

            foreach ($failedTest in $failedTests) {
                Write-Output $failedTest.Node."#text"
                Write-Output ""
            }

            Write-Output "::error ::Test run completed with $($testRun.Node.failed) failing test(s)."
            exit 1
          }

      - name: Prepare Sentry package for release
        run: |
          New-Item "package-release" -ItemType Directory

          # Copy `package-dev` stuff
          Copy-Item "package-dev/*" -Destination "package-release/" -Exclude "package.json", "Tests", "Tests.meta", "*.asmdef", "*.asmdef.meta" -Recurse

          # Copy `package` stuff
          Copy-Item "package/package.json" -Destination "package-release/package.json"
          Get-ChildItem "package/Editor/" -Include "*.asmdef", "*.asmdef.meta" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination "package-release/Editor/" }
          Get-ChildItem "package/Runtime/" -Include "*.asmdef", "*.asmdef.meta" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination "package-release/Runtime/" }

          # Copy samples
          Copy-Item "samples/unity-of-bugs/Assets/Scenes" -Destination "package-release/Samples~/unity-of-bugs/Assets/Scenes" -Recurse
          Copy-Item "samples/unity-of-bugs/Assets/Scripts" -Destination "package-release/Samples~/unity-of-bugs/Assets/Scripts" -Recurse

          # Create zip
          Compress-Archive "package-release/*" -DestinationPath "package-release.zip" -Force

      - name: Upload release artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ github.sha }}
          path: package-release.zip

      # Professional licenses are per-seat so we should always try to return them
      - name: Return Unity license
        run: |
          unity -quit -batchmode -nographics -logFile - -returnlicense | Out-Default
        if: ${{ always() }}
